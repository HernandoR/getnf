#!/bin/bash

#defining variables
nerdfontsrepo='https://api.github.com/repos/ryanoasis/nerd-fonts'
aFontInstalled="False"
removeZipFiles="True"
dist_dir="$HOME/.local/share/fonts"
down_dir="$(command -V xdg-user-dir &>/dev/null && xdg-user-dir DOWNLOAD || echo "$HOME/Downloads")/NerdFonts"
cache_dir="$HOME/.cache/nerdFonts"
update_fonts="False"
force_update="False"
os=$(uname)

# Set colors
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
BLUE=$(tput setaf 4)
RESET=$(tput sgr0)

# For Macs, need to set a few different things
if [[ "$os" == 'Darwin' ]]; then
	dist_dir="$HOME/Library/Fonts"
	cache_dir="$HOME/Library/Caches/NerdFonts"
fi

# help message
usage() {
	echo "${BLUE}getNF: A Better way to install NerdFonts${RESET}"
	echo ""
	echo "${BLUE}Usage:${RESET}"
	echo "${BLUE}-h print this help message and exit"
	echo "-f force reinstall an already installed font"
	echo "-k Keep the downloaded fonts zip files${RESET}"
	echo ""
	echo "- ${BLUE}Choose one font at a time from a list of Nerd Fonts"
	echo "- Type ${GREEN}i${RESET} ${BLUE}to install the selected fonts"
	echo "- Or ${RED}q${RESET} ${BLUE}to cancel${RESET}"
	echo ""
}

# Setting flags
while getopts :hkf option; do
	case "${option}" in
	h) usage && exit 0 ;;
	k) removeZipFiles="False" ;;
	f) force_update="True" ;;
	*) usage && exit 0 ;;
	esac
done

# Check if the distDir and downDir exists, if it doesn't, create it
[ -d "$dist_dir" ] && echo "${BLUE}Fonts directory exists, good.${RESET}" || (mkdir -p "$dist_dir" && echo "${GREEN}Created the fonts directory.${RESET}")
[ -d "$down_dir" ] && echo "${BLUE}Fonts download directory exists, good.${RESET}" || (mkdir -p "$down_dir" && echo "${GREEN}Created fonts download directory..${RESET}")
[ -d "$cache_dir" ] || mkdir -p "$cache_dir"

## Handle release version
# Set the name of the file to store the release number
release_file="$cache_dir/release.txt"
# Get the local release version
[ -f "$release_file" ] && cached_release=$(cat "$release_file") || cached_release=""
# Get the latest release number from NerdFonts github repo
release=$(curl --silent "$nerdfontsrepo/releases/latest" |
	awk -F'"' '/tag_name/ {print $4}')
# Compare the latest release number with the cached release number
if [ "$release" != "$cached_release" ]; then
	update_fonts=True
	# Update the cached release number
	echo "$release" >"$release_file"
fi

## Handle the font names
# Download the file list and extract the font names
font_list=$(curl -s "$nerdfontsrepo/contents/patched-fonts?ref=master" |
	awk -F'"' '/name/ {print $4}')
# Convert the list into an array
readarray -t fonts <<<"$font_list"
installed_fonts_file="$cache_dir/installed.txt"
[ -f "$installed_fonts_file" ] && installed_fonts_list=$(cat "$installed_fonts_file") || installed_fonts_list=()
readarray -t installed_fonts <<<"$installed_fonts_list"
# a list of currently selectd fonts
selected_fonts=()

# Remove installed fonts from the list of all fonts
if [[ $update_fonts = "False" ]]; then
	available_fonts=()
	for font in "${fonts[@]}"; do
		if [[ ! " ${installed_fonts[@]} " =~ " ${font} " ]]; then
			available_fonts+=("$font")
		fi
	done
else
	echo "" >"$installed_fonts_file"
	available_fonts=("${fonts[@]}")
fi

function print_selected_fonts() {
	if ((${#selected_fonts[@]} > 0)); then
		echo "${BLUE}Selected fonts:${RESET}"
		echo "${BLUE}[${RESET}${selected_fonts[@]}${BLUE}]${RESET}"
	fi
}

function remove_selected_fonts() {
	local font_options=("$@")
	for font in "${selected_fonts[@]}"; do
		font_options=("${options[@]/$font/}")
	done
	local filtered_options=()
	for font in "${font_options[@]}"; do
		if [[ -n $font ]]; then
			filtered_options+=("$font")
		fi
	done
	echo "${filtered_options[@]}"
}

function download_font() {
	echo "${BLUE}$1 download started...${RESET}"
	curl -LJO# "https://github.com/ryanoasis/nerd-fonts/releases/download/$release/$1.zip"
	echo "${GREEN}$1 download finished${RESET}"
}

function install_font() {
	echo "${BLUE}$1 instalation started...${RESET}"
	unzip -qqo "$1.zip" -d "$dist_dir"
	echo "${GREEN}$1 installation finished${RESET}"
}

function remove_zip_files() {
	echo "${BLUE}Removing downloaded zip files from $down_dir...${RESET}"
	for font in "${selected_fonts[@]}"; do
		rm $down_dir/$font.zip
	done
	echo "${GREEN}Downloaded zip files removal suceeded!${RESET}"
}

function update_fonts_cache() {
	echo "${BLUE}Updating fc-cache...${RESET}"
	fc-cache -f 2>&1
	echo "${GREEN}fc-cache: update succeeded!${RESET}"
}

# Prompt the user to select one or more fonts
PS3="${BLUE}Select a font (${GREEN}'i'${RESET} ${BLUE}to install, ${RED}'q'${RESET} ${BLUE}to quit):${RESET} "
while true; do
	# Print the selected fonts if any
	print_selected_fonts
	# Remove already selected fonts from the menu
	if [ $force_update = "True" ]; then
		font_options=("${fonts[@]}")
	else
		font_options=("${available_fonts[@]}")
	fi
	font_options=($(remove_selected_fonts "${font_options[@]}"))
	# if all the avilable options have been selected, proceed to download and install them.
	if ((${#font_options[@]} == 0)); then
		echo "${RED}All available fonts have been selected.${RESET}"
		break
	fi
	# Prompt the user to select a font
	select font in "${font_options[@]}"; do
		if [[ -n $font ]]; then
			selected_fonts+=("$font")
			break
		elif [[ $REPLY == i ]]; then
			break 2
		elif [[ $REPLY == q ]]; then
			exit
		else
			echo "${RED}Invalid selection. Try again.${RESET}"
		fi
	done
done

# loop over the selected fonts and download them
if ((${#selected_fonts[@]} > 0)); then
	for i in "${selected_fonts[@]}"; do
		pushd "$down_dir" >/dev/null
		download_font $i &&
			install_font $i &&
			echo $i >>"$installed_fonts_file"
		aFontInstalled=True
		popd >/dev/null
	done
else
	echo "${RED}No fonts were selected selected, exiting.${RESET}"
	exit
fi

# If a font was installed
if [ "$aFontInstalled" = "True" ]; then
	# Update the fonts cache
	update_fonts_cache
	# remove downloaded archives if the option -k was not passed
	if [ "$removeZipFiles" = "True" ]; then
		remove_zip_files
	else
		echo "${GREEN}The downloaded zip files can be found in $down_dir${RESET}"
	fi
fi

echo "${GREEN}All is done!${RESET}"
